name: Release
permissions:
  contents: write

on:
  pull_request:
    types:
      - closed
  workflow_dispatch:
    inputs:
      release_type:
        description: Select release type
        required: true
        type: choice
        options:
          - dev
          - patch
          - minor
          - rc
          - major
      release_name:
        description: "Optional: Release Name"
        required: false
        type: string
      release_body:
        description: "Optional: Release Body"
        required: false
        type:

jobs:
  determine-version:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    env:
      PR_NUMBER: ${{ github.event.pull_request.number }}
    steps:
      - uses: actions/checkout@v4
      - name: Get PR Labels
        id: get_labels
        if: github.event_name == 'pull_request'
        run: |
          labels=$(gh pr view "$PR_NUMBER" --json labels --jq '.labels[].name | select(test("^(patch|minor|major)$"))')
          count=$(echo "$labels" | wc -l)
          if [[ $count -ne 1 ]]; then
          echo "Exactly one of 'patch', 'minor', or 'major' must be present. Found $count."
          exit 0
          fi
          echo "RELEASE_TYPE=$labels" >> $GITHUB_ENV
      - name: Determine version bump
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "RELEASE_TYPE=${{ github.event.inputs.release_type }}" >> $GITHUB_ENV

  bumpversion:
    env:
      GH_TOKEN: ${{ github.token }}
    needs: determine-version
    runs-on: "ubuntu-latest"
    if: github.event.pull_request.merged == true || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Set up Python 3.12
        run: uv python install 3.12

      - name: Install hatch
        run: uv pip install hatch

      - name: Bump version using hatch
        run: |
          hatch version $RELEASE_TYPE
          echo "NEW_VERSION=$(hatch version)" >> $GITHUB_ENV
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add pyproject.toml
          git commit -m "Bump version to $NEW_VERSION"
          git tag $NEW_VERSION
          git push origin main --tags

  publish-testpypi:
    needs: bumpversion
    runs-on: ubuntu-latest
    env:
      python_version: 3.11
      TEST_PYPI_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Set up Python {{ env.python_version }}
        run: uv python install {{ env.python_version }}

      - name: Build and Publish to TestPyPI
        run: |
          uv build
          uv publish -r testpypi --token $TEST_PYPI_TOKEN

  publish-pypi:
    needs: publish-testpypi
    runs-on: ubuntu-latest
    env:
      python_version: 3.11
      PYPI_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Set up Python {{ env.python_version }}
        run: uv python install {{ env.python_version }}

      - name: Build and Publish to TestPyPI
        run: |
          uv build
          uv publish --token $PYPI_TOKEN

      - name: Create GitHub Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ env.NEW_VERSION }}
          release_name: ${{ github.event.inputs.release_name || env.NEW_VERSION }}
          body: ${{ github.event.inputs.release_body || 'Release version ' + env.NEW_VERSION }}
          draft: false
          prerelease: false
