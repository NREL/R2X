name: Release
permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: Select release type
        required: true
        type: choice
        options:
          - alpha
          - beta
          - dev
          - patch
          - minor
          - rc
          - major
      release_name:
        description: "Optional: Release Name"
        required: false
        type: string
      release_body:
        description: "Optional: Release Body"
        required: false
        type: string

jobs:
  determine-version:
    runs-on: ubuntu-latest
    outputs:
      release_type: ${{ steps.release_type.RELEASE_TYPE  }}
    steps:
      - uses: actions/checkout@v4
      - name: Determine version bump
        if: github.event_name == 'workflow_dispatch'
        id: release_type
        run: |
          echo "RELEASE_TYPE=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT

  bumpversion:
    env:
      GH_TOKEN: ${{ github.token }}
    needs: determine-version
    runs-on: "ubuntu-latest"
    outputs:
      version: ${{ steps.version.NEW_VERSION  }}
    steps:
      - uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: "Set up Python"
        uses: actions/setup-python@v5
        with:
          python-version-file: "pyproject.toml"

      - name: Install the project
        run: uv sync --all-extras --dev

      - name: Bump version using hatch
        id: version
        run: |
          uvx hatch version ${{ needs.determine-version.outputs.release_type }}
          echo "NEW_VERSION=$(uvx hatch version)" >> $GITHUB_ENV
          echo "NEW_VERSION=$(uvx hatch version)" >> $GITHUB_OUTPUT

      - name: Commit new version
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
          git add pyproject.toml
          git commit -m "Bump version to $NEW_VERSION"
          git tag $NEW_VERSION
          git push origin main --tags

  publish-testpypi:
    needs: bumpversion
    runs-on: ubuntu-latest
    env:
      python_version: 3.11
      TEST_PYPI_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Set up Python {{ env.python_version }}
        run: uv python install {{ env.python_version }}

      - name: Build and Publish to TestPyPI
        run: |
          uv build
          uv publish -r testpypi --token $TEST_PYPI_TOKEN

  publish-pypi:
    needs: [bumpversion, publish-testpypi]
    runs-on: ubuntu-latest
    env:
      python_version: 3.11
      PYPI_TOKEN: ${{ secrets.TEST_PYPI_TOKEN }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v3

      - name: Set up Python {{ env.python_version }}
        run: uv python install {{ env.python_version }}

      - name: Build and Publish to TestPyPI
        run: |
          uv build
          uv publish --token $PYPI_TOKEN

      - name: Create GitHub release
        run: |
          gh release create "v${needs.bumpversion.version}" -t "v${needs.bumpversion.version}" --generate-notes
