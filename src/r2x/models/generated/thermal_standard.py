# coding: utf-8

"""
PowerSystemModels

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 1.0.0
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from infrasys import Component

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing import Any, ClassVar, Dict, List, Optional, Union
from openapi_client.models.min_max import MinMax
from openapi_client.models.thermal_standard_operation_cost import ThermalStandardOperationCost
from openapi_client.models.up_down import UpDown
from typing import Optional, Set
from typing_extensions import Self


class ThermalStandard(Component):
    """
    ThermalStandard
    """  # noqa: E501

    active_power: Optional[Union[StrictFloat, StrictInt]] = 0.0
    active_power_limits: Optional[MinMax] = None
    available: Optional[StrictBool] = True
    base_power: Optional[Union[StrictFloat, StrictInt]] = 0.0
    bus_id: StrictInt
    fuel_type: Optional[StrictStr] = Field(
        default="OTHER", description="Thermal fuels that reflect options in the EIA annual energy review."
    )
    id: StrictInt
    must_run: Optional[StrictBool] = False
    name: StrictStr
    operation_cost: ThermalStandardOperationCost
    prime_mover: Optional[StrictStr] = "OT"
    ramp_limits: Optional[UpDown] = None
    rating: Optional[Union[StrictFloat, StrictInt]] = 0.0
    reactive_power: Optional[Union[StrictFloat, StrictInt]] = 0.0
    reactive_power_limits: Optional[MinMax] = None
    status: Optional[StrictBool] = True
    time_limits: Optional[UpDown] = None
    __properties: ClassVar[List[str]] = [
        "active_power",
        "active_power_limits",
        "available",
        "base_power",
        "bus_id",
        "fuel_type",
        "id",
        "must_run",
        "name",
        "operation_cost",
        "prime_mover",
        "ramp_limits",
        "rating",
        "reactive_power",
        "reactive_power_limits",
        "status",
        "time_limits",
    ]

    @field_validator("fuel_type")
    def fuel_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "COAL",
                "WASTE_COAL",
                "DISTILLATE_FUEL_OIL",
                "WASTE_OIL",
                "PETROLEUM_COKE",
                "RESIDUAL_FUEL_OIL",
                "NATURAL_GAS",
                "OTHER_GAS",
                "NUCLEAR",
                "AG_BIPRODUCT",
                "MUNICIPAL_WASTE",
                "WOOD_WASTE",
                "GEOTHERMAL",
                "OTHER",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('COAL', 'WASTE_COAL', 'DISTILLATE_FUEL_OIL', 'WASTE_OIL', 'PETROLEUM_COKE', 'RESIDUAL_FUEL_OIL', 'NATURAL_GAS', 'OTHER_GAS', 'NUCLEAR', 'AG_BIPRODUCT', 'MUNICIPAL_WASTE', 'WOOD_WASTE', 'GEOTHERMAL', 'OTHER')"
            )
        return value

    @field_validator("prime_mover")
    def prime_mover_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "BA",
                "BT",
                "CA",
                "CC",
                "CE",
                "CP",
                "CS",
                "CT",
                "ES",
                "FC",
                "FW",
                "GT",
                "HA",
                "HB",
                "HK",
                "HY",
                "IC",
                "PS",
                "OT",
                "ST",
                "PVe",
                "WT",
                "WS",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('BA', 'BT', 'CA', 'CC', 'CE', 'CP', 'CS', 'CT', 'ES', 'FC', 'FW', 'GT', 'HA', 'HB', 'HK', 'HY', 'IC', 'PS', 'OT', 'ST', 'PVe', 'WT', 'WS')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ThermalStandard from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of active_power_limits
        if self.active_power_limits:
            _dict["active_power_limits"] = self.active_power_limits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of operation_cost
        if self.operation_cost:
            _dict["operation_cost"] = self.operation_cost.to_dict()
        # override the default output from pydantic by calling `to_dict()` of ramp_limits
        if self.ramp_limits:
            _dict["ramp_limits"] = self.ramp_limits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of reactive_power_limits
        if self.reactive_power_limits:
            _dict["reactive_power_limits"] = self.reactive_power_limits.to_dict()
        # override the default output from pydantic by calling `to_dict()` of time_limits
        if self.time_limits:
            _dict["time_limits"] = self.time_limits.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ThermalStandard from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "active_power": obj.get("active_power") if obj.get("active_power") is not None else 0.0,
                "active_power_limits": MinMax.from_dict(obj["active_power_limits"])
                if obj.get("active_power_limits") is not None
                else None,
                "available": obj.get("available") if obj.get("available") is not None else True,
                "base_power": obj.get("base_power") if obj.get("base_power") is not None else 0.0,
                "bus_id": obj.get("bus_id"),
                "fuel_type": obj.get("fuel_type") if obj.get("fuel_type") is not None else "OTHER",
                "id": obj.get("id"),
                "must_run": obj.get("must_run") if obj.get("must_run") is not None else False,
                "name": obj.get("name"),
                "operation_cost": ThermalStandardOperationCost.from_dict(obj["operation_cost"])
                if obj.get("operation_cost") is not None
                else None,
                "prime_mover": obj.get("prime_mover") if obj.get("prime_mover") is not None else "OT",
                "ramp_limits": UpDown.from_dict(obj["ramp_limits"])
                if obj.get("ramp_limits") is not None
                else None,
                "rating": obj.get("rating") if obj.get("rating") is not None else 0.0,
                "reactive_power": obj.get("reactive_power") if obj.get("reactive_power") is not None else 0.0,
                "reactive_power_limits": MinMax.from_dict(obj["reactive_power_limits"])
                if obj.get("reactive_power_limits") is not None
                else None,
                "status": obj.get("status") if obj.get("status") is not None else True,
                "time_limits": UpDown.from_dict(obj["time_limits"])
                if obj.get("time_limits") is not None
                else None,
            }
        )
        return _obj
